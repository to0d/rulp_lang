(defun ls-attribute-of (?subject) 
    (if (equal ?subject local)
    
        (ls-is-const (value-of (:: (value-of local::parent) parent)))
        
        (loop for ?mbr in (ls ?subject) do 
            (print "obj=" (name-of $(value-of ?mbr)))
            (print ", type=" (type-of $(value-of (value-of ?mbr))))
            (print ", attribute=" (attribute-of  $(value-of (value-of ?mbr))))
            (print "\n")
        )
    )
)
;=>ls-attribute-of

(ls-attribute-of root)
;=>nil
;out:
obj=!=, type=factor, attribute='(opt-cc0)
obj=%, type=factor, attribute='(opt-cc0)
obj=&, type=factor, attribute='(opt-cc0)
obj=*, type=factor, attribute='(opt-cc0)
obj=+, type=factor, attribute='(opt-cc0)
obj=-, type=factor, attribute='(opt-cc0)
obj=/, type=factor, attribute='(opt-cc0)
obj=::, type=factor, attribute='()
obj=<, type=factor, attribute='(opt-cc0)
obj=<=, type=factor, attribute='(opt-cc0)
obj==, type=factor, attribute='(opt-cc0)
obj=>, type=factor, attribute='(opt-cc0)
obj=>=, type=factor, attribute='(opt-cc0)
obj=?file.separator, type=var, attribute='()
obj=?os.name, type=var, attribute='()
obj=?os.version, type=var, attribute='()
obj=?path.separator, type=var, attribute='()
obj=?user.dir, type=var, attribute='()
obj=?user.home, type=var, attribute='()
obj=?user.name, type=var, attribute='()
obj=^, type=factor, attribute='(opt-cc0)
obj=access, type=factor, attribute='()
obj=add-array-to-list, type=factor, attribute='()
obj=add-attribute, type=factor, attribute='()
obj=add-list-to-array, type=factor, attribute='()
obj=add-list-to-list, type=factor, attribute='()
obj=add_search_frame, type=factor, attribute='()
obj=alias, type=factor, attribute='()
obj=and, type=factor, attribute='(opt-cc0)
obj=array, type=atom, attribute='()
obj=atom, type=atom, attribute='()
obj=attribute-of, type=factor, attribute='()
obj=blob, type=atom, attribute='()
obj=blob-length, type=factor, attribute='()
obj=bool, type=atom, attribute='()
obj=break, type=factor, attribute='()
obj=can-cast, type=factor, attribute='()
obj=case, type=factor, attribute='()
obj=class, type=atom, attribute='()
obj=class-of, type=factor, attribute='()
obj=cmp_def, type=factor, attribute='()
obj=compute, type=factor, attribute='()
obj=constant, type=atom, attribute='()
obj=continue, type=factor, attribute='()
obj=date, type=factor, attribute='()
obj=default, type=atom, attribute='()
obj=defclass, type=factor, attribute='()
obj=defconst, type=factor, attribute='()
obj=defmacro, type=factor, attribute='()
obj=deftemplate, type=factor, attribute='()
obj=defun, type=factor, attribute='()
obj=defvar, type=factor, attribute='()
obj=delete, type=factor, attribute='()
obj=do, type=factor, attribute='()
obj=do-p, type=factor, attribute='()
obj=do-when-obj-deleted, type=factor, attribute='()
obj=do-when-var-changed, type=factor, attribute='()
obj=double, type=atom, attribute='()
obj=equal_def, type=factor, attribute='()
obj=error, type=factor, attribute='()
obj=error-value, type=factor, attribute='()
obj=expr, type=atom, attribute='()
obj=factor, type=atom, attribute='()
obj=false, type=bool, attribute='()
obj=final, type=atom, attribute='()
obj=float, type=atom, attribute='()
obj=foreach, type=factor, attribute='()
obj=frame, type=atom, attribute='()
obj=frame-of, type=factor, attribute='()
obj=from, type=atom, attribute='()
obj=func, type=atom, attribute='()
obj=get-of-array, type=factor, attribute='()
obj=get-of-list, type=factor, attribute='()
obj=has-member, type=factor, attribute='()
obj=if, type=factor, attribute='()
obj=instance, type=atom, attribute='()
obj=int, type=atom, attribute='()
obj=is-const, type=factor, attribute='()
obj=is-stable, type=factor, attribute='()
obj=join, type=factor, attribute='()
obj=lambda, type=factor, attribute='()
obj=let, type=factor, attribute='()
obj=list, type=atom, attribute='()
obj=list-function-in-return, type=factor, attribute='()
obj=load, type=factor, attribute='()
obj=long, type=atom, attribute='()
obj=loop, type=factor, attribute='()
obj=ls, type=factor, attribute='()
obj=macro, type=atom, attribute='()
obj=make-array, type=factor, attribute='()
obj=make-blob, type=factor, attribute='()
obj=make-list, type=factor, attribute='()
obj=make-string, type=factor, attribute='()
obj=member, type=atom, attribute='()
obj=name-of, type=factor, attribute='()
obj=namespace, type=class, attribute='()
obj=nan, type=atom, attribute='()
obj=native, type=atom, attribute='()
obj=new, type=factor, attribute='()
obj=nil, type=null, attribute='()
obj=noclass, type=class, attribute='()
obj=not, type=factor, attribute='(opt-cc0)
obj=null, type=atom, attribute='()
obj=open-txt-file, type=factor, attribute='()
obj=opt-status, type=factor, attribute='()
obj=or, type=factor, attribute='(opt-cc0)
obj=out-to-file, type=factor, attribute='()
obj=parent-of, type=factor, attribute='()
obj=power, type=factor, attribute='(opt-cc0)
obj=print, type=factor, attribute='()
obj=print-frame-tree, type=factor, attribute='()
obj=print-global-info, type=factor, attribute='()
obj=print-impl, type=factor, attribute='()
obj=print-subject, type=factor, attribute='()
obj=private, type=atom, attribute='()
obj=property-of, type=factor, attribute='()
obj=public, type=atom, attribute='()
obj=random, type=factor, attribute='()
obj=ref, type=factor, attribute='()
obj=remove, type=factor, attribute='()
obj=return, type=factor, attribute='()
obj=return-tco, type=factor, attribute='()
obj=reverse, type=factor, attribute='()
obj=root, type=frame, attribute='()
obj=rulp-object-count, type=factor, attribute='()
obj=save-txt-file, type=factor, attribute='()
obj=search-frame-of, type=factor, attribute='()
obj=seta, type=factor, attribute='()
obj=setq, type=factor, attribute='()
obj=size-of-array, type=factor, attribute='()
obj=size-of-list, type=factor, attribute='()
obj=sleep, type=factor, attribute='()
obj=sort, type=factor, attribute='()
obj=static, type=atom, attribute='()
obj=str-char-at, type=factor, attribute='(opt-cc0)
obj=str-end-with, type=factor, attribute='(opt-cc0)
obj=str-equal, type=factor, attribute='(opt-cc0)
obj=str-equal-nocase, type=factor, attribute='(opt-cc0)
obj=str-format, type=factor, attribute='(opt-cc0)
obj=str-index-of, type=factor, attribute='(opt-cc0)
obj=str-last-index-of, type=factor, attribute='(opt-cc0)
obj=str-length, type=factor, attribute='(opt-cc0)
obj=str-match, type=factor, attribute='(opt-cc0)
obj=str-replace, type=factor, attribute='(opt-cc0)
obj=str-split, type=factor, attribute='(opt-cc0)
obj=str-split-line, type=factor, attribute='(opt-cc0)
obj=str-start-with, type=factor, attribute='(opt-cc0)
obj=str-substr, type=factor, attribute='(opt-cc0)
obj=str-trim, type=factor, attribute='(opt-cc0)
obj=str-trim-head, type=factor, attribute='(opt-cc0)
obj=str-trim-tail, type=factor, attribute='(opt-cc0)
obj=str-upper, type=factor, attribute='(opt-cc0)
obj=strcat, type=factor, attribute='(opt-cc0)
obj=string, type=atom, attribute='()
obj=subject-of, type=factor, attribute='()
obj=sys-free-memory, type=factor, attribute='()
obj=sys-gc, type=factor, attribute='()
obj=sys-time, type=factor, attribute='()
obj=sys-total-memory, type=factor, attribute='()
obj=to-atom, type=factor, attribute='()
obj=to-blob, type=factor, attribute='()
obj=to-expr, type=factor, attribute='()
obj=to-int, type=factor, attribute='(opt-cc0)
obj=to-named-list, type=factor, attribute='()
obj=to-nonamed-list, type=factor, attribute='()
obj=to-string, type=factor, attribute='()
obj=true, type=bool, attribute='()
obj=try, type=factor, attribute='()
obj=type#namespace, type=atom, attribute='()
obj=type#noclass, type=atom, attribute='()
obj=type-of, type=factor, attribute='()
obj=union, type=factor, attribute='()
obj=uniq, type=factor, attribute='()
obj=value-of, type=factor, attribute='()
obj=value-type-of, type=factor, attribute='()
obj=var, type=atom, attribute='()
obj=when, type=factor, attribute='()
obj=write-blob, type=factor, attribute='()
obj=|, type=factor, attribute='(opt-cc0)
obj=~, type=factor, attribute='(opt-cc0)

;eof

(ls-attribute-of system)
;=>nil
;out:
obj=++, type=macro, attribute='()
obj=--, type=macro, attribute='()
obj=?load-paths, type=var, attribute='()
obj=?script-path, type=var, attribute='()
obj=?trace, type=var, attribute='()
obj=_ginfo, type=func, attribute='()
obj=add, type=func, attribute='()
obj=add-all, type=func, attribute='()
obj=clear, type=func, attribute='()
obj=cmp, type=func, attribute='()
obj=equal, type=func, attribute='()
obj=file-prename, type=func, attribute='()
obj=file-subffix, type=func, attribute='()
obj=get, type=func, attribute='()
obj=is-blank, type=func, attribute='()
obj=is-empty, type=func, attribute='()
obj=length-of, type=func, attribute='()
obj=ls-print, type=func, attribute='()
obj=map, type=class, attribute='(final)
obj=print-list, type=macro, attribute='()
obj=println, type=func, attribute='()
obj=queue, type=class, attribute='(final)
obj=root, type=frame, attribute='()
obj=script_out, type=macro, attribute='()
obj=set, type=class, attribute='(final)
obj=size-of, type=func, attribute='()
obj=stack, type=class, attribute='(final)
obj=system, type=frame, attribute='()
obj=to-array, type=func, attribute='()
obj=to-list, type=func, attribute='()
obj=type#map, type=atom, attribute='()
obj=type#queue, type=atom, attribute='()
obj=type#set, type=atom, attribute='()
obj=type#stack, type=atom, attribute='()
obj=use, type=template, attribute='()

;eof

(ls-attribute-of main)
;=>nil
;out:
obj=?script-path, type=var, attribute='()
obj=ls-attribute-of, type=func, attribute='()
obj=main, type=frame, attribute='()
obj=root, type=frame, attribute='()
obj=system, type=frame, attribute='()

;eof

