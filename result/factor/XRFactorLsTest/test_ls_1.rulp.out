(ls)
;=>'(main::main main::root main::system)

(ls local)
;=>'(main::local main::main main::root main::system)

(ls main)
;=>'(main::local main::main main::root main::system)

(value-of main::parent)
;=>system

(value-of system::parent)
;=>root

(print-subject root)
;=>nil
;out:
id=0, name=root, lvl=0, ref=0/0, entry=172, subject=root
==========================================================================================================================
Name(alias)          : EntryId  FrameId  Ref  Type       Value               
--------------------------------------------------------------------------------------------------------------------------
?os.version          : -201     0        1    var        10.0 : type=string  
?os.name             : -200     0        1    var        Windows 10 : type=string
?path.separator      : -199     0        1    var        ; : type=string     
?file.separator      : -198     0        1    var        \ : type=string     
?user.dir            : -197     0        1    var        C:\data\itool\irulp_base : type=string
?user.name           : -196     0        1    var        921511672 : type=string
?user.home           : -195     0        1    var        C:\Users\YANLIU : type=string
rulp-object-count    : -167     0        0    factor     rulp-object-count   
sys-time             : -166     0        0    factor     sys-time            
sys-gc               : -165     0        0    factor     sys-gc              
random               : -164     0        0    factor     random              
date                 : -163     0        0    factor     date                
do-p                 : -162     0        0    factor     do-p                
sleep                : -161     0        0    factor     sleep               
seta                 : -160     0        0    factor     seta                
add-array-to-list    : -159     0        0    factor     add-array-to-list   
add-list-to-array    : -158     0        0    factor     add-list-to-array   
to-nonamed-list      : -157     0        0    factor     to-nonamed-list     
to-named-list        : -156     0        0    factor     to-named-list       
get-of-array         : -155     0        0    factor     get-of-array        
reverse              : -154     0        0    factor     reverse             
sort                 : -153     0        0    factor     sort                
uniq                 : -152     0        0    factor     uniq                
union                : -151     0        0    factor     union               
join                 : -150     0        0    factor     join                
remove               : -149     0        0    factor     remove              
add-list-to-list     : -148     0        0    factor     add-list-to-list    
get-of-list          : -147     0        0    factor     get-of-list         
foreach              : -146     0        0    factor     foreach             
try                  : -145     0        0    factor     try                 
error-value          : -144     0        0    factor     error-value         
error                : -143     0        0    factor     error               
case                 : -142     0        0    factor     case                
do                   : -141     0        0    factor     do                  
break                : -140     0        0    factor     break               
continue             : -139     0        0    factor     continue            
return               : -138     0        0    factor     return              
loop                 : -137     0        0    factor     loop                
when                 : -136     0        0    factor     when                
if                   : -135     0        0    factor     if                  
lambda               : -134     0        0    factor     lambda              
let                  : -133     0        0    factor     let                 
make-cps             : -132     0        0    factor     make-cps            
deftemplate          : -131     0        0    factor     deftemplate         
defun                : -130     0        0    factor     defun               
defmacro             : -129     0        0    factor     defmacro            
can-cast             : -128     0        0    factor     can-cast            
cmp_def              : -127     0        0    factor     cmp_def             
<=                   : -126     0        0    factor     <=                  
>=                   : -125     0        0    factor     >=                  
<                    : -124     0        0    factor     <                   
>                    : -123     0        0    factor     >                   
!=                   : -122     0        0    factor     !=                  
=                    : -121     0        0    factor     =                   
or                   : -120     0        0    factor     or                  
and                  : -119     0        0    factor     and                 
not                  : -118     0        0    factor     not                 
~                    : -117     0        0    factor     ~                   
^                    : -116     0        0    factor     ^                   
|                    : -115     0        0    factor     |                   
&                    : -114     0        0    factor     &                   
power                : -113     0        0    factor     power               
%                    : -112     0        0    factor     %                   
/                    : -111     0        0    factor     /                   
*                    : -110     0        0    factor     *                   
-                    : -109     0        0    factor     -                   
+                    : -108     0        0    factor     +                   
str-split-line       : -107     0        0    factor     str-split-line      
str-upper            : -106     0        0    factor     str-upper           
str-replace          : -105     0        0    factor     str-replace         
str-split            : -104     0        0    factor     str-split           
str-char-at          : -103     0        0    factor     str-char-at         
str-format           : -102     0        0    factor     str-format          
str-last-index-of    : -101     0        0    factor     str-last-index-of   
str-index-of         : -100     0        0    factor     str-index-of        
str-length           : -99      0        0    factor     str-length          
str-substr           : -98      0        0    factor     str-substr          
str-end-with         : -97      0        0    factor     str-end-with        
str-start-with       : -96      0        0    factor     str-start-with      
str-match            : -95      0        0    factor     str-match           
str-trim-tail        : -94      0        0    factor     str-trim-tail       
str-trim-head        : -93      0        0    factor     str-trim-head       
str-trim             : -92      0        0    factor     str-trim            
str-equal-nocase     : -91      0        0    factor     str-equal-nocase    
str-equal            : -90      0        0    factor     str-equal           
strcat               : -89      0        0    factor     strcat              
to-int               : -88      0        0    factor     to-int              
to-string            : -87      0        0    factor     to-string           
make-string          : -86      0        0    factor     make-string         
write-blob           : -85      0        0    factor     write-blob          
to-blob              : -84      0        0    factor     to-blob             
blob-length          : -83      0        0    factor     blob-length         
make-blob            : -82      0        0    factor     make-blob           
defconst             : -81      0        0    factor     defconst            
ref                  : -80      0        0    factor     ref                 
do-when-obj-deleted  : -79      0        0    factor     do-when-obj-deleted 
do-when-var-changed  : -78      0        0    factor     do-when-var-changed 
setq                 : -77      0        0    factor     setq                
defvar               : -76      0        0    factor     defvar              
print-frame-tree     : -75      0        0    factor     print-frame-tree    
print-subject        : -74      0        0    factor     print-subject       
save-txt-file        : -73      0        0    factor     save-txt-file       
open-txt-file        : -72      0        0    factor     open-txt-file       
out-to-file          : -71      0        0    factor     out-to-file         
load                 : -70      0        0    factor     load                
print                : -69      0        0    factor     print               
type#namespace       : -68      0        0    atom       type#namespace      
namespace            : -67      0        1    class      namespace           
ls                   : -66      0        0    factor     ls                  
has-member           : -65      0        0    factor     has-member          
::                   : -64      0        0    factor     ::                  
defclass             : -63      0        0    factor     defclass            
delete               : -62      0        0    factor     delete              
new                  : -61      0        0    factor     new                 
access               : -60      0        0    factor     access              
property-of          : -59      0        0    factor     property-of         
class-of             : -58      0        0    factor     class-of            
type#noclass         : -57      0        0    atom       type#noclass        
noclass              : -56      0        0    class      noclass             
make-array           : -55      0        0    factor     make-array          
make-list            : -54      0        0    factor     make-list           
is-const             : -53      0        0    factor     is-const            
search-frame-of      : -52      0        0    factor     search-frame-of     
add_search_frame     : -51      0        0    factor     add_search_frame    
parent-of            : -50      0        0    factor     parent-of           
frame-of             : -49      0        0    factor     frame-of            
subject-of           : -48      0        0    factor     subject-of          
size-of-array        : -47      0        0    factor     size-of-array       
size-of-list         : -46      0        0    factor     size-of-list        
to-atom              : -45      0        0    factor     to-atom             
equal_def            : -44      0        0    factor     equal_def           
alias                : -43      0        0    factor     alias               
value-type-of        : -42      0        0    factor     value-type-of       
value-of             : -41      0        0    factor     value-of            
type-of              : -40      0        0    factor     type-of             
name-of              : -39      0        0    factor     name-of             
?trace               : -38      0        1    var        false : type=bool   
?op-stable           : -37      0        1    var        false : type=bool   
?op-cps              : -36      0        1    var        false : type=bool   
frame                : -35      0        0    atom       frame               
member               : -34      0        0    atom       member              
native               : -33      0        0    atom       native              
class                : -32      0        0    atom       class               
instance             : -31      0        0    atom       instance            
macro                : -30      0        0    atom       macro               
func                 : -29      0        0    atom       func                
factor               : -28      0        0    atom       factor              
constant             : -27      0        0    atom       constant            
var                  : -26      0        0    atom       var                 
array                : -25      0        0    atom       array               
expr(EXPRESSION)     : -24      0        0    atom       expr                
list(LIST)           : -23      0        0    atom       list                
blob                 : -22      0        0    atom       blob                
string(STRING)       : -21      0        0    atom       string              
double               : -20      0        0    atom       double              
float(FLOAT)         : -19      0        0    atom       float               
long                 : -18      0        0    atom       long                
int(INTEGER)         : -17      0        0    atom       int                 
bool(BOOL)           : -16      0        0    atom       bool                
atom                 : -15      0        0    atom       atom                
null                 : -14      0        0    atom       null                
from                 : -13      0        0    atom       from                
static               : -12      0        0    atom       static              
final                : -11      0        0    atom       final               
default              : -10      0        0    atom       default             
private              : -9       0        0    atom       private             
public               : -8       0        0    atom       public              
nan                  : -7       0        0    atom       nan                 
false                : -6       0        0    bool       false               
true                 : -5       0        0    bool       true                
nil                  : -4       0        0    null       nil                 
root                 : -1       0        0    frame      frame@root          
==========================================================================================================================


;eof

(print-subject system)
;=>nil
;out:
id=1, name=system, lvl=1, ref=0/0, entry=30, pid=0(root), subject=system
==========================================================================================================================
Name(alias)          : EntryId  FrameId  Ref  Type       Value               
--------------------------------------------------------------------------------------------------------------------------
parent               : -202     1        0    frame      frame@root          
type#stack           : -194     1        0    atom       type#stack          
stack                : -193     1        1    class      stack               
type#queue           : -192     1        0    atom       type#queue          
queue                : -191     1        1    class      queue               
type#map             : -190     1        0    atom       type#map            
map                  : -189     1        1    class      map                 
clear                : -188     1        1    funcList   '((clear type#map) (clear type#queue) (clear type#set) (clear type#stack)) : frame=null, type=list
                                         1    func       (clear type#set) : frame=frame@system
                                         1    func       (clear type#map) : frame=frame@system
                                         1    func       (clear type#queue) : frame=frame@system
                                         1    func       (clear type#stack) : frame=frame@system
type#set             : -187     1        0    atom       type#set            
set                  : -186     1        1    class      set                 
print-list           : -185     1        1    macro      print-list          
get                  : -184     1        1    funcList   '((get array int int) (get array int) (get list int) (get type#queue int)) : frame=null, type=list
                                         1    func       (get list int) : frame=frame@system
                                         1    func       (get array int) : frame=frame@system
                                         1    func       (get array int int) : frame=frame@system
                                         1    func       (get type#queue int) : frame=frame@system
add-all              : -183     1        1    func       (add-all list list) : frame=frame@system
add                  : -182     1        1    funcList   '((add array nil nil nil) (add array nil nil) (add array nil) (add list nil nil nil) (add list nil nil) (add list nil)) : frame=null, type=list
                                         1    func       (add list nil) : frame=frame@system
                                         1    func       (add list nil nil) : frame=frame@system
                                         1    func       (add list nil nil nil) : frame=frame@system
                                         1    func       (add array nil) : frame=frame@system
                                         1    func       (add array nil nil) : frame=frame@system
                                         1    func       (add array nil nil nil) : frame=frame@system
to-array             : -181     1        1    func       (to-array list) : frame=frame@system
to-list              : -180     1        1    funcList   '((to-list array) (to-list list) (to-list type#queue) (to-list type#set) (to-list type#stack)) : frame=null, type=list
                                         1    func       (to-list list) : frame=frame@system
                                         1    func       (to-list array) : frame=frame@system
                                         1    func       (to-list type#set) : frame=frame@system
                                         1    func       (to-list type#queue) : frame=frame@system
                                         1    func       (to-list type#stack) : frame=frame@system
size-of              : -179     1        1    funcList   '((size-of array int) (size-of array) (size-of list) (size-of type#map) (size-of type#queue) (size-of type#set) (size-of type#stack)) : frame=null, type=list
                                         1    func       (size-of list) : frame=frame@system
                                         1    func       (size-of array) : frame=frame@system
                                         1    func       (size-of array int) : frame=frame@system
                                         1    func       (size-of type#set) : frame=frame@system
                                         1    func       (size-of type#map) : frame=frame@system
                                         1    func       (size-of type#queue) : frame=frame@system
                                         1    func       (size-of type#stack) : frame=frame@system
ls-print             : -178     1        1    funcList   '((ls-print nil nil) (ls-print nil)) : frame=null, type=list
                                         1    func       (ls-print nil nil) : frame=frame@system
                                         1    func       (ls-print nil) : frame=frame@system
use                  : -177     1        1    template   (use '('(namespace) '(? type#namespace)) '('(namespace) '(? frame)) '('(namespace class) '(?))) : frame=frame@system
is-blank             : -176     1        1    func       (is-blank string) : frame=frame@system
is-empty             : -175     1        1    funcList   '((is-empty array) (is-empty list) (is-empty string) (is-empty type#map) (is-empty type#queue) (is-empty type#set) (is-empty type#stack)) : frame=null, type=list
                                         1    func       (is-empty string) : frame=frame@system
                                         1    func       (is-empty list) : frame=frame@system
                                         1    func       (is-empty array) : frame=frame@system
                                         1    func       (is-empty type#set) : frame=frame@system
                                         1    func       (is-empty type#map) : frame=frame@system
                                         1    func       (is-empty type#queue) : frame=frame@system
                                         1    func       (is-empty type#stack) : frame=frame@system
++                   : -174     1        1    macro      ++                  
--                   : -173     1        1    macro      --                  
println              : -172     1        1    funcList   '((println nil nil nil nil nil) (println nil nil nil nil) (println nil nil nil) (println nil nil) (println nil) (println)) : frame=null, type=list
                                         1    func       (println) : frame=frame@system
                                         1    func       (println nil) : frame=frame@system
                                         1    func       (println nil nil) : frame=frame@system
                                         1    func       (println nil nil nil) : frame=frame@system
                                         1    func       (println nil nil nil nil) : frame=frame@system
                                         1    func       (println nil nil nil nil nil) : frame=frame@system
cmp                  : -171     1        1    func       (cmp nil nil) : frame=frame@system
equal                : -170     1        1    funcList   '((equal nil nil) (equal string string)) : frame=null, type=list
                                         1    func       (equal nil nil) : frame=frame@system
                                         1    func       (equal string string) : frame=frame@system
length-of            : -169     1        1    funcList   '((length-of blob) (length-of string)) : frame=null, type=list
                                         1    func       (length-of string) : frame=frame@system
                                         1    func       (length-of blob) : frame=frame@system
?load-paths          : -168     1        1    var        '() : type=list     
system               : -3       1        0    frame      frame@system        
root                 : -2       1        0    frame      frame@root          
==========================================================================================================================


;eof

(print-subject main)
;=>nil
;out:
id=2, name=main, lvl=2, ref=1/1, entry=5, pid=1(system), subject=main
==========================================================================================================================
Name(alias)          : EntryId  FrameId  Ref  Type       Value               
--------------------------------------------------------------------------------------------------------------------------
root                 : 1        2        0    frame      frame@root          
system               : 2        2        0    frame      frame@system        
main                 : 3        2        1    frame      frame@main          
local                : 4        2        1    frame      frame@main          
parent               : 5        2        0    frame      frame@system        
==========================================================================================================================


;eof

