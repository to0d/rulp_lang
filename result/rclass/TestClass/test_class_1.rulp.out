(defclass class1
    (defvar ?value 0)
    (defun add (?x) (setq ?value (+ ?value ?x)))
    (defun sub (?x) (setq ?value (- ?value ?x)))
    (defun get ()   (return ?value))
    (defun set (?x) (setq ?value ?x))
)
;=>class1

(list-of class1)
;=>'(class1::?value class1::add class1::get class1::set class1::sub)

(new class1 o1)
;=>o1

(list-of o1)
;=>'(o1::this)

(o1::get)
;=>0

(list-of o1)
;=>'(o1::?rv o1::?value o1::get o1::this)

(o1::set 5)
;=>nil

(o1::get)
;=>5

(o1::add 1)
;=>nil

(o1::get)
;=>6

(o1::sub 2)
;=>nil

(o1::get)
;=>4

(list-of o1)
;=>'(o1::?rv o1::?value o1::add o1::get o1::set o1::sub o1::this)

((:: o1 get))
;=>4

(list-of class1)
;=>'(class1::?value class1::add class1::get class1::set class1::sub)

(list-of o1)
;=>'(o1::?rv o1::?value o1::add o1::get o1::set o1::sub o1::this)

(script_out (print-subject o1 -1) "_a.txt")
;=>nil

(type-of o1)
;=>instance

(rulp-object-count frame)
;=>2

(delete o1)
;=>nil

(type-of o1)
;=>atom

(rulp-object-count frame)
;=>1

(_ginfo)
;=>nil

