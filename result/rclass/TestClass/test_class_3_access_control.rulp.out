(defclass class1
    (defvar ?value 0)[private]
    (defun add (?x) (setq ?value (+ ?value ?x)))[public]
    (defun sub (?x) (setq ?value (- ?value ?x)))[private]
    (defun get ()   (return ?value))
    (defun set (?x) (setq ?value ?x))
)
;=>class1

(list-of class1)
;=>'(class1::?value class1::add class1::get class1::set class1::sub)

(new class1 o1)
;=>o1

(list-of o1)
;=>'(o1::this)

(o1::get)
;=>0

(list-of o1)
;=>'(o1::?rv o1::?value o1::get o1::this)

(o1::set 5)
;=>nil

(o1::get)
;=>5

(o1::add 1)
;=>nil

(o1::get)
;=>6

(access o1::add)
;=>true

(access o1::sub)
;=>false

(o1::sub 2)
;err:
Can't access member<class1@o1::sub> in frame<frame@main>
at o1::sub ; main-2
at (o1::sub 2) ; main-2
;eof

(value-of o1::?value)
;err:
Can't access member<class1@o1::?value> in frame<frame@main>
at (value-of o1::?value) ; main-2
;eof

(class1::sub 2)
;err:
Can't access member<class1::sub> in frame<frame@main>
at class1::sub ; main-2
at (class1::sub 2) ; main-2
;eof

(value-of class1::?value)
;err:
Can't access member<class1::?value> in frame<frame@main>
at (value-of class1::?value) ; main-2
;eof

(property-of class1::?value)
;=>'(private)

(property-of class1::add)
;=>'(public)

(property-of class1::sub)
;=>'(private)

(property-of class1::get)
;=>'(default)

(property-of class1::set)
;=>'(default)

(property-of o1::?value)
;=>'(private)

(property-of o1::add)
;=>'(public)

(property-of o1::sub)
;=>'(private)

(property-of o1::get)
;=>'(default)

(property-of o1::set)
;=>'(default)

