
;; the cps callee should be "pure" function
;;  -- no global (external) variable
;;  -- no non-callee function called
;;  -- no non-cps factor called
;;  -- no lambda function


;; fact(n) = n*fact(n-1)
(defun fact (?v)
    (do
        (if (<= ?v 0)(return 1))
        (return (* ?v (fact (- ?v 1))))
    )
)


(defun fact2 (?v)
    (do
        (if (<= ?v 1)(return 1))
        (if (> ?v 500)(return ?v))
        (return (fact2 (+ ?v 1)))
    )
)

(defun fact3 (?v)
    (do
        (if (<= ?v 0)(return 1))
        (if (<= ?v 1)(return 0))
        (return (fact3 (fact3 (- ?v 1))))
    )
)

;; fun1(n) = n + fun1(n-1)
(defun fun1a (?v)
    (do 
        (if (<= ?v 0)(return 0))
        (return (+ ?v (fun1a (- ?v 1))))
    )
)

;; fun1(n) = n + fun1(n-1)
(defun fun1b (?v)
    (do 
        (if (> ?v 0)(return (+ ?v (fun1b (- ?v 1)))))
        (return 0)
    )
)

;; fun2(n) = 0                          when n <=0
;;         = n + fun2(n-1)              when n < 10
;;         = fun2(n-1) + fun2(n/2-1)    when n < 100
;;         = fun2(n-1) + fun2(n/4-1)    when n < 1000
;;         = fun2(n-1) + fun2(n/8-1)    other
(defun fun2 (?v) 
    (do 
        (if (<= ?v 0)(return 0))
        (if (<= ?v 10)(return (+ ?v (fun2 (- ?v 1)))))
        (if (<= ?v 100)(return (+ (fun2 (- ?v 1)) (fun2 (- (/ ?v 2) 1)))))
        (if (<= ?v 1000)(return (+ (fun2 (- ?v 1)) (fun2 (- (/ ?v 4) 1)))))    
        (return (+ (fun2 (- ?v 1)) (fun2 (- (/ ?v 8) 1))))
    )
)

;; fun1(n) = n / fun1(n-1)
(defun fun3 (?v) 
    (do 
        (if (<= ?v 0)(return 1))
        (return (/ ?v (fun3 (- ?v 1))))
    )
)


(defun fun4a (?v) 
    (do 
        (if (<= ?v 0)(return 0))
        (return (+ ?v (fun4b (- ?v 1))))
    )
)

(defun fun4b (?v) 
    (do 
        (if (<= ?v 0)(return 0))
        (return (+ ?v (fun4a (- ?v 1))))
    )
)

(defun fun5 (?s) 
    (if (> (length-of ?s) 10)
        (return ?s)) 
    (return (fun5 (+ "a" ?s))))
