(defun fun (?v) 

    (if (<= ?v 0)
        (return 0))
        
    (case (+ 1 1)
        (1 (return (+ 1 (fun (- ?v 1)))))
        (2 (return (+ 2 (fun (- ?v 1)))))
        (? (return (+ 3 (fun (- ?v 1))))))

)[opt-cc0]
;=>fun

(attribute-of fun)
;=>'(opt-cc0)

(print-impl fun)
;=>nil
;out:
(defun fun (?v)
    (do (if (<= ?v 0) (return 0)) (return (+ 2 (fun (- ?v 1)))))
)

;eof

(fun 5)
;=>10

(opt-status)
;=>nil
;out:
==========================================================================================================================
      Name: Status
--------------------------------------------------------------------------------------------------------------------------
       TCO: expr=0, call=0, compute=0
       CC0: compute=2
       CC1: expr=0, call=0, cache=0, reuse=0
       CC2: expr=0, call=0, cache=0
==========================================================================================================================

;eof

(_ginfo)
;=>nil

