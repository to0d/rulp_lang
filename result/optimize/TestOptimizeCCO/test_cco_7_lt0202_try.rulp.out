(defun isHappy ((?n int))
    
    (if (<= ?n 0) (return false))
    (if (= ?n 1) (return true))

    (defvar ?n2 0)
    (defvar ?x)
    (loop 
        (if (<= ?n 0) 
            (break))
        (setq ?x (% ?n 10))
        (setq ?n (/ ?n 10))
        (setq ?n2 (+ ?n2 (power ?x 2)))
    )
    
    (try 
        (return (isHappy ?n2))
        (catch ?e (return false))
    )
)[opt-cco]
;=>isHappy

(isHappy 1999999999)
;=>false

(attribute-of isHappy)
;=>'(opt-cco)

(print-impl isHappy)
;=>nil
;out:
(defun isHappy ((?n int))
    (do[stable]
        (if (<= ?n 0)
            (return false)
        )
        (if (= ?n 1)
            (return true)
        )
        (defvar ?n2 0)
        (defvar ?x)
        (loop
            (if (<= ?n 0)
                (break)
            )
            (setq ?x (% ?n 10))
            (setq ?n (/ ?n 10))
            (setq ?n2 (+ ?n2 (power ?x 2)))
        )
        (try
            (return[stable] (cc2[opt-id=0] (isHappy ?n2)))
            (catch ?e (return false))
        )
    )
)[opt-cco]
rebuild: id=0, name=cc2, call=10, hit=0, func=isHappy, cache=9, data:[$$i_145/false/D/0] [$$i_16/false/D/0] [$$i_20/false/D/0]...

;eof

(opt-status)
;=>nil
;out:
==========================================================================================================================
      Name: Status
--------------------------------------------------------------------------------------------------------------------------
       ERO: rebuild=0, compute=0
       CCO: rebuild=1, expr=1, call=10, cache=0, reuse=0
       TCO: rebuild=0, expr=0, call=0, node=0, compute=0, level=0, stack=0
       LCO: rebuild=0, arg=0, pass=0, hit=0
==========================================================================================================================

;eof

(_ginfo)
;=>nil

