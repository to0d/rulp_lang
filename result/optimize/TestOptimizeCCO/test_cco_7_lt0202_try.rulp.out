(defun isHappy ((?n int))
    
    (if (<= ?n 0) (return false))
    (if (= ?n 1) (return true))

    (defvar ?n2 0)
    (defvar ?x)
    (loop 
        (if (<= ?n 0) 
            (break))
        (setq ?x (% ?n 10))
        (setq ?n (/ ?n 10))
        (setq ?n2 (+ ?n2 (power ?x 2)))
    )
    
    (try 
        (return (isHappy ?n2))
        (catch ?e (return false))
    )
)[opt-cco]
;=>isHappy

(print-impl isHappy)
;=>nil
;out:
(defun isHappy ((?n int))
    (do
        (if
            (<= ?n 0)
            (return false)
        )
        (if
            (= ?n 1)
            (return true)
        )
        (defvar ?n2 0)
        (defvar ?x)
        (loop
            (if
                (<= ?n 0)
                (break)
            )
            (setq ?x (% ?n 10))
            (setq ?n (/ ?n 10))
            (setq ?n2 (+ ?n2 (power ?x 2)))
        )
        (try
            (return (isHappy ?n2))
            (catch ?e (return false))
        )
    )
)

;eof

(isHappy 1999999999)
;err:
java.lang.StackOverflowError
;eof

