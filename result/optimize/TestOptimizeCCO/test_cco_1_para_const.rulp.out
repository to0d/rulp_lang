(load "tool")
;=>nil

(defun fun1 (?v)
    (return (max ?v (+ (- 10 (+ 4 5)) 1)))
)
;=>fun1

(defun fun2 ()
    (defvar ?x 0)
    (loop for x from 1 to 3 do
        (setq ?x (+ ?x (fun1 1)))
    )
    (return ?x)
)[opt-cco]
;=>fun2

(fun2)
;=>6

(attribute-of fun1)
;=>'('(recursive false) '(stable true) '(stmt-count 42))

(attribute-of fun2)
;=>'(opt-cco)

(print-impl fun2)
;=>nil
;out:
(defun fun2 ()
    (defvar ?x 0)
    (loop[stable] for x from 1 to 3 do
        (setq[stable] ?x (+[atom return-type=1 stable] ?x (cc2[opt-id=0] (fun1 1))))
    )
    (return ?x)
)[opt-cco]
rebuild: id=0, name=cc2, call=3, hit=2, func=fun1, cache=1, data:[$$i_1/2/D/2]

;eof

(opt-status)
;=>nil
;out:
==========================================================================================================================
      Name: Status
--------------------------------------------------------------------------------------------------------------------------
       ERO: rebuild=0, compute=0
       CCO: rebuild=1, expr=1, call=3, cache=2, reuse=0
       TCO: rebuild=0, expr=0, call=0, node=0, compute=0, level=0, stack=0
       LCO: rebuild=0, arg=0, pass=0, hit=0
==========================================================================================================================

;eof

(_ginfo)
;=>nil

