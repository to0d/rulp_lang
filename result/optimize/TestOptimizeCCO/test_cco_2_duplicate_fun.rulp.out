(defun fun1 (?v)
    (return (+ ?v 1))
)
;=>fun1

(defun fun2 ()
    (defvar ?x 0)
    (loop for x from 1 to 3 do
        (setq ?x (+ ?x (fun1 1)))
        (setq ?x (+ ?x (fun1 1)))
    )
    (return ?x)
)[opt-cco]
;=>fun2

(fun2)
;=>12

(attribute-of fun1)
;=>'('(stable true))

(attribute-of fun2)
;=>'(opt-cco)

(print-impl fun2)
;=>nil
;out:
(defun fun2 ()
    (do[stable]
        (defvar ?x 0)
        (loop[stable] for x from 1 to 3 do
            (setq[stable]
                ?x
                (+[atom return-type=1 stable] ?x (cc2[opt-id=0] (fun1 1)))
            )
            (setq[stable]
                ?x
                (+[atom return-type=1 stable] ?x (cc2[opt-id=0] (fun1 1)))
            )
        )
        (return ?x)
    )
)[opt-cco]
rebuild: id=0, name=cc2, call=6, hit=5, func=fun1, cache=1, data:[$$i_1/2/D/5]

;eof

(opt-status)
;=>nil
;out:
==========================================================================================================================
      Name: Status
--------------------------------------------------------------------------------------------------------------------------
       ERO: rebuild=0, compute=0
       CCO: rebuild=1, expr=1, call=6, cache=5, reuse=1
       TCO: rebuild=0, expr=0, call=0, compute=0, max-level=0, node=0
==========================================================================================================================

;eof

(_ginfo)
;=>nil

