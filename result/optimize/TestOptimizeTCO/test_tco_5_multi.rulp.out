;; fun2(n) = 0                          when n <=0
;;         = n + fun2(n-1)              when n < 10
;;         = fun2(n-1) + fun2(n/2-1)    when n < 100
;;         = fun2(n-1) + fun2(n/4-1)    when n < 1000
;;         = fun2(n-1) + fun2(n/8-1)    other
(defun fun2 (?v) 
    (do 
        (if (<= ?v 0)(return 0))
        (if (<= ?v 10)(return (+ ?v (fun2 (- ?v 1)))))
        (if (<= ?v 100)(return (+ (fun2 (- ?v 1)) (fun2 (- (/ ?v 2) 1)))))
        (if (<= ?v 1000)(return (+ (fun2 (- ?v 1)) (fun2 (- (/ ?v 4) 1)))))
        (return (+ (fun2 (- ?v 1)) (fun2 (- (/ ?v 8) 1))))
    )
)[opt-tco]
;=>fun2

(list-function-in-return fun2)
;=>'("fun2")

(attribute-of fun2)
;=>'(opt-tco)

(fun2 0)
;=>0

(fun2 1)
;=>1

(fun2 2)
;=>3

(fun2 3)
;=>6

(fun2 11)
;=>65

(fun2 101)
;=>132564

(opt-status)
;=>nil
;out:
==========================================================================================================================
      Name: Status
--------------------------------------------------------------------------------------------------------------------------
       TCO: rebuild=11, expr=4, call=37168, compute=252432
       CC0: rebuild=0, compute=0
       CC1: rebuild=0, expr=0, call=0, cache=0, reuse=0
       CC2: rebuild=0, expr=0, call=0, cache=0
       CC3: rebuild=0, expr=0, call=0, cache=0
==========================================================================================================================

;eof

(_ginfo)
;=>nil

