(defun ls-is-stable-fun (?subject) 
    (if (equal ?subject local)
    
        (ls-is-stable-fun (value-of (:: (value-of local::parent) parent)))
        
        (loop for ?mbr in (ls ?subject) do 
            (if (not (equal func (type-of $(value-of (value-of ?mbr)))))
                (continue)
            )
            
            (print "obj=" (name-of $(value-of ?mbr)))
            (print ", type=" (type-of $(value-of (value-of ?mbr))))
            (print ", stable=" (is-stable  $(value-of (value-of ?mbr))))
            (print "\n")
        )
    )
)
;=>ls-is-stable-fun

(ls-is-stable-fun root)
;=>nil

(ls-is-stable-fun system)
;=>nil
;out:
obj=add, type=func, stable=false
obj=add-all, type=func, stable=false
obj=clear, type=func, stable=false
obj=cmp, type=func, stable=true
obj=equal, type=func, stable=true
obj=get, type=func, stable=false
obj=is-blank, type=func, stable=true
obj=is-empty, type=func, stable=false
obj=length-of, type=func, stable=true
obj=ls-print, type=func, stable=false
obj=println, type=func, stable=false
obj=size-of, type=func, stable=false
obj=to-array, type=func, stable=false
obj=to-list, type=func, stable=false

;eof

(ls-is-stable-fun main)
;=>nil
;out:
obj=ls-is-stable-fun, type=func, stable=false

;eof

