(defun fun1 (?v)
    (return (+ ?v 1))
)
;=>fun1

(defun fun2 (?m)
    (defvar ?x 0)
    (loop for ?i from 1 to ?m do
        (setq ?x (+ ?x (fun1 (+ ?i 1))))
    )
    (return ?x)
)[opt-cc3]
;=>fun2

(attribute-of fun1)
;=>'()

(attribute-of fun2)
;=>'()

(print-impl fun2)
;=>nil
;out:
(defun fun2 (?m)
    (do
        (defvar ?x 0)
        (loop for ?i from 1 to ?m do (setq ?x (+ ?x (fun1 (+ ?i 1)))))
        (return ?x)
    )
)

;eof

(fun2 5)
;=>25

(opt-status)
;=>nil
;out:
==========================================================================================================================
      Name: Status
--------------------------------------------------------------------------------------------------------------------------
       TCO: expr=0, call=0, compute=0
       CC0: compute=0
       CC1: expr=0, call=0, cache=0, reuse=0
       CC2: expr=0, call=0, cache=0
==========================================================================================================================

;eof

(_ginfo)
;=>nil

