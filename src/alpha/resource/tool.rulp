
(defun print-list ((?list list)) 
    (loop for ?e in ?list do 
        (print ?e "\n")
    )
)

;****************************************************;
; Subject tools
;****************************************************;
(defun print-list (?subject ?type) 
    (if (equal ?subject local)
    
        (print-list (value-of (:: (value-of local::parent) parent)) ?type)
        
        (loop for ?mbr in (list-of ?subject) do 
            (if (and (not (equal ?type nil)) 
                     (not (equal ?type (type-of $(value-of (value-of ?mbr))))))
                (continue)
            )

            ;; output member 
            (print "mbr=" (name-of $(value-of ?mbr)))
            
            (if (not (access $(value-of ?mbr)))
                (do
                    (print ", access deny\n")
                    (continue)
                )
            )

            (print ", mbr-property=" (property-of $(value-of ?mbr)))
            (print ", mbr-attribute=" (attribute-of $(value-of ?mbr)))
    
            (print ", obj=" (name-of $(value-of (value-of ?mbr))))
            (print ", obj-type=" (type-of $(value-of (value-of ?mbr))))
            (print ", obj-attribute=" (attribute-of $(value-of (value-of ?mbr))))

            (if (equal (type-of $(value-of (value-of ?mbr))) class)
                (print ", class-property=" (property-of $(value-of (value-of ?mbr)))))
            
            (if (equal (type-of $(value-of (value-of ?mbr))) instance)
                (print ", instance-class=" (class-of $(value-of (value-of ?mbr)))))
            
            (if (equal (type-of $(value-of (value-of ?mbr))) var)
                (print ", var-value=\"" $(value-of (value-of ?mbr)) "\""))

            (print "\n")
        )
    )
)

(defun print-list (?subject)
    (print-list ?subject nil)
)

;****************************************************;
; File System tools
;****************************************************;
(defun to-valid-path ((?path string))
    
    (if (= ?path "") 
        (return ?user.dir))

    (if (str-end-with ?path ?file.separator)
        (return ?path))
    
    (return (+ ?path ?file.separator))
)

;****************************************************;
; Time tools
;****************************************************;
(defun day-is-bigger-than ((?day1 string) (?day2 string))
    (return (> (day-number ?day1) (day-number ?day2)))
)

(defun day-is-smaller-than ((?day1 string) (?day2 string))
    (return (< (day-number ?day1) (day-number ?day2)))
)

;****************************************************;
; Other tools
;****************************************************;
(defun index-of (?obj (?list list))
    (defvar ?pos (- (size-of ?list) 1))    
    (loop 
        (if (< ?pos 0) 
            (break))
        (defvar ?obj2 (get ?list ?pos))
        (if (equal ?obj ?obj2)
            (break))
        (-- ?pos)
    )    
    (return ?pos)
)

