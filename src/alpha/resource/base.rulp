(alias int INTEGER)
(alias float FLOAT)
(alias bool BOOL)
(alias string STRING)
(alias list LIST)
(alias expr EXPRESSION)

(defvar ?load-paths '())

(defun size-of ((?l list)) (return (size-of-list ?l)))
(defun size-of ((?arr array)) (return (size-of-array ?arr)))
(defun size-of ((?arr array) (?dim int)) (return (size-of-array ?arr ?dim)))

(defun is-empty ((?l list)) (return (equal (size-of-list ?l) 0)))
(defun is-empty ((?arr array)) (return (equal (size-of-array ?arr) 0)))

(defun to-list ((?l list)) (return ?l))
(defun to-list  ((?arr array)) (return (add-array-to-list '() ?arr)))

(defun to-array  ((?l list)) (return (add-list-to-array {} ?l)))

(defun add ((?l list) ?e0) (return (add-list-to-list ?l '(?e0))))
(defun add ((?l list) ?e0 ?e1) (return (add-list-to-list ?l '(?e0 ?e1))))
(defun add ((?l list) ?e0 ?e1 ?e2) (return (add-list-to-list ?l '(?e0 ?e1 ?e2))))
(defun add ((?a array) ?e0) (return (add-list-to-array ?a '(?e0))))
(defun add ((?a array) ?e0 ?e1) (return (add-list-to-array ?a '(?e0 ?e1))))
(defun add ((?a array) ?e0 ?e1 ?e2) (return (add-list-to-array ?a '(?e0 ?e1 ?e2))))

(defun add-all ((?l1 list) (?l2 list)) (return (add-list-to-list ?l1 ?l2)))


(defun get ((?l list) (?i int)) (return (get-of-list ?l ?i)))
(defun get ((?arr array) (?i1 int)) (return (get-of-array ?arr ?i1)))
(defun get ((?arr array) (?i1 int) (?i2 int)) (return (get-of-array ?arr ?i1 ?i2)))

(defun length-of ((?l string)) (return (str-length ?l)))
(defun length-of ((?l blob)) (return (blob-length ?l)))

(defun equal (?l ?2) (return (equal_def ?l ?2)))
(defun equal ((?l string) (?2 string)) (return (str-equal ?l ?2)))

(defun cmp (?l ?2) (return (cmp_def ?l ?2)))

(defmacro print-list (?list) 
    (loop for ?e in ?list do 
        (print ?e "\n")
    )
)

(defun ls-print (?subject ?type) 
    (if (equal ?subject local)
    
        (ls-print (value-of (:: (value-of local::parent) parent)) ?type)
        
        (loop for ?mbr in (ls ?subject) do 
            (if (and (not (equal ?type nil)) 
                     (not (equal ?type (type-of $(value-of (value-of ?mbr))))))
                (continue)
            )
        
            (print "mbr=" (name-of $(value-of ?mbr))
            )
            
            (if (not (access $(value-of ?mbr)))
                (do
                    (print ", access deny\n")
                    (continue)
                )
            )                
            
            (print ", name=" (name-of $(value-of (value-of ?mbr)))
                   ", type=" (type-of $(value-of (value-of ?mbr)))
                   ", property=" (property-of $(value-of ?mbr))
            )
            
            (if (equal (type-of $(value-of (value-of ?mbr))) class)
                (print ", class-property=" (property-of $(value-of (value-of ?mbr)))))
            
            (if (equal (type-of $(value-of (value-of ?mbr))) instance)
                (print ", instance-class=" (class-of $(value-of (value-of ?mbr)))))
            
            (if (equal (type-of $(value-of (value-of ?mbr))) var)
                (print ", value=\"" $(value-of (value-of ?mbr)) "\""))
            
            (print "\n")
        )
    )
)

(defun ls-print (?subject)
    (ls-print ?subject nil)
)


(defclass set () final
    
    (defvar ?impl nil private)
    
    (defun init ()
        (setq ?impl (set::_set_init)) final)
    
    (defun add (?v)
        (set::_set_add ?impl ?v) final)
    
    (defun has (?v)
        (return (set::_set_has ?impl ?v)) final)
    
    (defun size-of ()
        (return (set::_set_size_of ?impl)) final)
        
    (defun is-empty ()
        (return (set::_set_is_empty ?impl)) final)
        
    (defun clear ()
        (set::_set_clear ?impl) final)
        
    (defun to-list ()
        (return (set::_set_to_list ?impl)) final)
)

(defun size-of  ((?set set)) (return (?set::size-of)))
(defun is-empty ((?set set)) (return (?set::is-empty)))
(defun clear    ((?set set)) (return (?set::clear)))
(defun to-list  ((?set set)) (return (?set::to-list)))

(defclass map () final
    
    (defvar ?impl nil private)
    
    (defun init ()
        (setq ?impl (map::_map_init)) final)
    
    (defun put (?k ?v)
        (map::_map_put ?impl ?k ?v) final)
    
    (defun get (?k)
        (return (map::_map_get ?impl ?k)) final)
    
    (defun size-of ()
        (return (map::_map_size_of ?impl)) final)
        
    (defun is-empty ()
        (return (map::_map_is_empty ?impl)) final)
        
    (defun clear ()
        (map::_map_clear ?impl) final)

)

(defun size-of  ((?map map))    (return (?map::size-of)))
(defun is-empty ((?map map))    (return (?map::is-empty)))
(defun clear    ((?map map))    (return (?map::clear)))

(defclass queue () final
    
    (defvar ?impl nil private)
    
    (defun init ()
        (setq ?impl (queue::_queue_init)) final)
    
    (defun push (?e)
        (queue::_queue_push_back ?impl ?e) final)
        
    (defun push_back (?e)
        (queue::_queue_push_back ?impl ?e) final)
        
    (defun push_front (?e)
        (queue::_queue_push_front ?impl ?e) final)
    
    (defun pop ()
        (return (queue::_queue_pop_front ?impl)) final)

    (defun pop_back ()
        (return (queue::_queue_pop_back ?impl)) final)
    
    (defun pop_front ()
        (return (queue::_queue_pop_front ?impl)) final)
    
    (defun peek ()
        (return (queue::_queue_peek_front ?impl)) final)

    (defun peek_back ()
        (return (queue::_queue_peek_back ?impl)) final)

    (defun peek_front ()
        (return (queue::_queue_peek_front ?impl)) final)

    (defun get (?k)
        (return (queue::_queue_get ?impl ?k)) final)

    (defun size-of ()
        (return (queue::_queue_size_of ?impl)) final)
        
    (defun is-empty ()
        (return (queue::_queue_is_empty ?impl)) final)

    (defun clear ()
        (queue::_queue_clear ?impl) final)
        
    (defun to-list ()
        (return (queue::_queue_to_list ?impl)) final)
)

(defun size-of  ((?queue queue))            (return (?queue::size-of)))
(defun get      ((?queue queue) (?i1 int))  (return (?queue::get ?i1)))
(defun is-empty ((?queue queue))            (return (?queue::is-empty)))
(defun clear    ((?queue queue))            (?queue::clear))
(defun to-list  ((?queue queue))            (return (?queue::to-list)))

(defclass stack () final
    
    (defvar ?impl nil private)
    
    (defun init ()
        (setq ?impl (new queue)) final)
    
    (defun push (?e)
        (?impl::push_back ?e) final)

    (defun pop ()
        (return (?impl::pop_back)) final)
    
    (defun peek ()
        (return (?impl::peek_back)) final)

    (defun size-of ()
        (return (?impl::size-of)) final)
        
    (defun is-empty ()
        (return (?impl::is-empty)) final)
        
    (defun clear ()
        (?impl::clear) final)
        
    (defun to-list ()
        (return (?impl::to-list)) final)
)

(defun size-of  ((?stack stack)) (return (?stack::size-of)))
(defun is-empty ((?stack stack)) (return (?stack::is-empty)))
(defun clear    ((?stack stack)) (return (?stack::clear)))
(defun to-list  ((?stack stack)) (return (?stack::to-list)))

(defclass socket () final

    (defvar ?impl nil private)
    
    (defun init (?addr ?port)
        (setq ?impl (socket::_socket_init ?addr ?port)) final)
        
    (defun open ()
        (socket::_socket_open ?impl) final)        
   
    (defun close ()
        (socket::_socket_close ?impl) final)   

    (defun write (?val)
        (socket::_socket_write ?impl ?val) final)
        
     (defun getLocalHost () 
        (return (socket::_socket_getLocalHost)) static)
        
     (defun getHostAddress () 
        (return (socket::_socket_getHostAddress)) static)
)

;(defclass namespace ())
;

(deftemplate use ((namespace atom) (?ns namespace))
    (add_search_frame parent (frame-of $(value-of ?ns)))
)

(deftemplate use ((namespace atom) (?ns frame))
    (add_search_frame parent ?ns)
)

(deftemplate use (namespace ?ns)
    (error bad-type (strcat "namespace not found: " (to-string ?ns)))
)