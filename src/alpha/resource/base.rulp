;****************************************************;
; Alias
;****************************************************;
(alias int INTEGER)
(alias float FLOAT)
(alias bool BOOL)
(alias string STRING)
(alias list LIST)
(alias expr EXPRESSION)

;****************************************************;
; Optimize attribute 
;****************************************************;
(add-attribute !=                atom)
(add-attribute %                 atom)
(add-attribute &                 atom)
(add-attribute *                 atom)
(add-attribute +                 atom)
(add-attribute -                 atom)
(add-attribute /                 atom)
(add-attribute <                 atom)
(add-attribute <=                atom)
(add-attribute =                 atom)
(add-attribute >                 atom)
(add-attribute >=                atom)
(add-attribute ^                 atom)
(add-attribute |                 atom)
(add-attribute ~                 atom)
(add-attribute and               atom)
(add-attribute not               atom)
(add-attribute or                atom)
(add-attribute power             atom)
(add-attribute str-char-at       atom)
(add-attribute str-end-with      atom)
(add-attribute str-equal         atom)
(add-attribute str-equal-nocase  atom)
(add-attribute str-format        atom)
(add-attribute str-index-of      atom)
(add-attribute str-last-index-of atom)
(add-attribute str-length        atom)
(add-attribute str-match         atom)
(add-attribute str-replace       atom)
(add-attribute str-split         atom)
(add-attribute str-split-line    atom)
(add-attribute str-start-with    atom)
(add-attribute str-substr        atom)
(add-attribute str-trim          atom)
(add-attribute str-trim-head     atom)
(add-attribute str-trim-tail     atom)
(add-attribute str-upper         atom)
(add-attribute strcat            atom)
(add-attribute to-int            atom)

;****************************************************;
; Enviroment vars
;****************************************************;
(defvar ?load-paths '())


;****************************************************;
; Basic tools
;****************************************************;
(defun length-of ((?l string)) (return (str-length ?l)))
(defun length-of ((?l blob)) (return (blob-length ?l)))

(defun equal (?l ?2) (return (equal_def ?l ?2)))
(defun equal ((?l string) (?2 string)) (return (str-equal ?l ?2)))

(defun cmp (?l ?2) (return (cmp_def ?l ?2)))

(defun println ()                                    (print "\n"))
(defun println (?a1)                                 (print ?a1 "\n"))
(defun println (?a1 ?a2)                             (print ?a1 ?a2 "\n"))
(defun println (?a1 ?a2 ?a3)                         (print ?a1 ?a2 ?a3 "\n"))
(defun println (?a1 ?a2 ?a3 ?a4)                     (print ?a1 ?a2 ?a3 ?a4 "\n"))
(defun println (?a1 ?a2 ?a3 ?a4 ?a5)                 (print ?a1 ?a2 ?a3 ?a4 ?a5 "\n"))
(defun println (?a1 ?a2 ?a3 ?a4 ?a5 ?a6)             (print ?a1 ?a2 ?a3 ?a4 ?a5 ?a6 "\n"))
(defun println (?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7)         (print ?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7 "\n"))
(defun println (?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7 ?a8)     (print ?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7 ?a8 "\n"))
(defun println (?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7 ?a8 ?a9) (print ?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7 ?a8 ?a9 "\n"))

(defmacro -- (?v) (setq ?v (- ?v 1)))
(defmacro ++ (?v) (setq ?v (+ ?v 1)))


;****************************************************;
; Namespace tools
;****************************************************;
(deftemplate use ((namespace atom) (?ns namespace))
    (add_search_frame parent (frame-of $(value-of ?ns)))
)

(deftemplate use ((namespace atom) (?ns frame))
    (add_search_frame parent ?ns)
)

(deftemplate use (namespace ?ns)
    (error bad-type (strcat "namespace not found: " (to-string ?ns)))
)

;****************************************************;
; Collection tools
;****************************************************;
(defun size-of ((?l list)) (return (size-of-list ?l)))
(defun size-of ((?arr array)) (return (size-of-array ?arr)))
(defun size-of ((?arr array) (?dim int)) (return (size-of-array ?arr ?dim)))

(defun is-empty ((?l list)) (return (equal (size-of-list ?l) 0)))
(defun is-empty ((?arr array)) (return (equal (size-of-array ?arr) 0)))

(defun to-list ((?l list)) (return ?l))
(defun to-list  ((?arr array)) (return (add-array-to-list '() ?arr)))

(defun to-array  ((?l list)) (return (add-list-to-array {} ?l)))

(defun add ((?l list) ?e0) (return (add-list-to-list ?l '(?e0))))
(defun add ((?l list) ?e0 ?e1) (return (add-list-to-list ?l '(?e0 ?e1))))
(defun add ((?l list) ?e0 ?e1 ?e2) (return (add-list-to-list ?l '(?e0 ?e1 ?e2))))
(defun add ((?a array) ?e0) (return (add-list-to-array ?a '(?e0))))
(defun add ((?a array) ?e0 ?e1) (return (add-list-to-array ?a '(?e0 ?e1))))
(defun add ((?a array) ?e0 ?e1 ?e2) (return (add-list-to-array ?a '(?e0 ?e1 ?e2))))

(defun add-all ((?l1 list) (?l2 list)) (return (add-list-to-list ?l1 ?l2)))

(defun get ((?l list) (?i int)) (return (get-of-list ?l ?i)))
(defun get ((?arr array) (?i1 int)) (return (get-of-array ?arr ?i1)))
(defun get ((?arr array) (?i1 int) (?i2 int)) (return (get-of-array ?arr ?i1 ?i2)))

(defmacro print-list (?list) 
    (loop for ?e in ?list do 
        (print ?e "\n")
    )
)
